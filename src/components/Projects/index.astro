---
import { Image } from "astro:assets";


import Mantenimiento from "./images/mantenimientoo.jpg";
import Habitos from "./images/habitos.jpg";
import GestiHorarios from "./images/GestiHorarios.png";
import CryptoSalud from "./images/CryptoSalud.png";

import { Icon } from "astro-icon";
const PROJECTS = [
  {
    name: "CryptoSalud",
    image: { src: CryptoSalud, alt: "CryptoSalud" },
    description:
      "Pagina web de historias de usuario implementando blockchain y docker",
    technologies: ["Vue.js", "Express", "Node.js", "MongoDB", "Docker"],
    // liveLink: 'https://miguel-llanten.vercel.app/',
    sourceLink: "https://github.com/Filollan/Backend_Historias_Clinicas",
  },
  {
    name: "GestiHorarios",
    image: { src: GestiHorarios, alt: "GestiHorarios" },
    description:
      "Aplicación web para hacer la gestion los horarios de docentes de una institución",
    technologies: ["Laravel", "Boostrap", "MySQL", "Apache"],
    //liveLink: 'https://miguel-llanten.vercel.app/',
    sourceLink: "https://github.com/Filollan/GestiHorarios",
  },

  {
    name: "Mantenimiento",
    image: { src: Mantenimiento, alt: "Mantenimiento" },
    description:
      "Pagina web para la gestion de mantenimiento de equipos de una empresa",
    technologies: ["PHP", "Boostrap", "Mysql"],
    //liveLink: 'https://miguel-llanten.vercel.app/',
    sourceLink: "https://github.com/Filollan/Mantenimiento_equipos",
  },
  /*{
    name: 'Habits',
    image: { src: Habitos, alt: 'Habitos' },
    description:
      'Esta es una pagina web en la cual se puede gestionar habitos y tareas del dia a dia, desarrollada con el stack MEVN.',
    technologies: ['MongoDB', 'Express', 'Vue.js', 'Node.js'],
    liveLink: 'https://miguel-llanten.vercel.app',
    sourceLink: 'https://github.com/Filollan/GESTIONARTAREAS',
  }, */
];
---

<div class="section__divider">
  <section class="container section projects-section" id="projects">
    <!-- Contenedor de partículas -->
    <div class="particles-container" aria-hidden="true">
      <canvas 
        class="particles-canvas"
        data-particle-animation
        width="100%"
        height="100%"
        style="width: 100%; height: 100%;">
      </canvas>
    </div>
    <h2 class="section__title">Proyectos</h2>
    <p class="section__description">...</p>
    <div class="project-list">
      {
        PROJECTS.map((project) => (
          <div class="project__wrapper" data-inviewport>
            <article class="project">
              <div class="project__image">
                <Image
                  src={project.image.src}
                  width={800}
                  height={538}
                  alt={project.image.alt}
                />
              </div>

              <div>
                <h3 class="medium-heading">{project.name}</h3>
                <p class="small-p">{project.description}</p>
                <ul class="project__technologies list">
                  {project.technologies.map((technology) => (
                    <li>{technology}</li>
                  ))}
                </ul>
                {
                  <div class="project__links">
                  { /* <a
                      class="button button--primary"
                      target="_blank"
                      href={project.liveLink}
                    >
                      <span class="icon-wrapper--small">
                        <Icon name="lucide:link" class="icon-xs" />
                      </span>
                      <span>Pagina</span>
                   </a> */}                    <a
                      class="button button--secondary button--outline"
                      target="_blank"
                      href={project.sourceLink}
                    >
                      <span class="icon-wrapper--small">
                        <Icon name="lucide:github" class="icon-xs" />
                      </span>
                      <span>Codigo</span>
                    </a>
                  </div>
                }
              </div>
            </article>
          </div>
        ))
      }
    </div>
  </section>
</div>

<style lang="scss">
  @use "styles/screen";
  .projects-section {
    position: relative;
    z-index: 1;
  }

  .particles-container {
    position: absolute;
    inset: 0;
    pointer-events: none;
    z-index: -1;
  }

  .particles-canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .project-list {
    display: flex;
    flex-direction: column;
    gap: 3rem;
  }

  .project {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: 1rem;

    > div {
      flex: 1;
    }

    &__wrapper {
      background-color: var(--background);
      border: 1px solid var(--accents-2);
      border-radius: 1rem;
      box-shadow: var(--project-shadow);
      max-width: 700px;
      margin: 0 auto;
    }

    &__image {
      display: flex;
      align-items: center;
      justify-content: center;
      aspect-ratio: 16 / 10;
      border-radius: 0.5rem;

      img {
        width: auto;
        height: auto;
        border-radius: inherit;
      }
    }

    &__technologies {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin-bottom: 1.5rem;

      li {
        padding: 0.25rem 0.75rem;
        font-size: 15px;
        color: var(--accents-8);
        border: 1px solid var(--accents-2);
        border-radius: 0.25rem;
        box-shadow: var(--badge-shadow);
      }
    }

    &__links {
      display: flex;
      flex-direction: column;
      gap: 0.8rem;

      a {
        text-decoration: none;
      }
    }

    @media (min-width: screen.$md) {
      &__title {
        font-size: 1.75rem;
      }

      &__description {
        font-size: 1.1rem;
      }
    }

    @media (min-width: screen.$lg) {
      flex-direction: row;
      padding: 1.25rem;
    }
  }
</style>

<script>
  import { ParticleAnimation } from '../../utils/particles';

  document.addEventListener('DOMContentLoaded', () => {
    const canvas = document.querySelector('#projects [data-particle-animation]');
    if (!(canvas instanceof HTMLCanvasElement)) return;

    // Configuración específica para la sección de proyectos
    const projectsParticles = new ParticleAnimation(canvas, {
      quantity: 25, // Más partículas para crear un efecto más dinámico
      staticity: 2.5, // Movimiento moderado
      ease: 25, // Velocidad moderada
      particleColor: {
        light: 'rgba(255, 0, 0, 0.6)', // Rojo suave en modo claro
        dark: 'rgba(255, 255, 255, 0.6)' // Blanco suave en modo oscuro
      }
    });

    // Limpieza cuando el componente se desmonta
    document.addEventListener('astro:before-swap', () => {
      projectsParticles.destroy();
    });
  });
</script>
