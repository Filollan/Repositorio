---
import { Icon } from "astro-icon";
---
<div class="hero__wrapper">
  <!-- Partículas animadas -->
  <div class="-z-10 absolute inset-0 pointer-events-none" aria-hidden="true">
    <canvas 
      class="absolute inset-0"
      data-particle-animation 
      data-particle-quantity="20" 
      data-particle-staticity="3" 
      data-particle-ease="50" 
      width="100%" 
      height="100%" 
      style="width: 100%; height: 100%;">
    </canvas>
  </div>
  <!-- Contenido principal del héroe -->
  <section class="hero container" data-inviewport>
    <h1 class="hero__title">
        Miguel Llanten
    </h1>
    <h2 class="hero__subtitle">Desarrollador Web</h2>
    <p class="section__description">
      ¡Hola! Soy estudiante de Ingeniería Informática en los últimos semestres y desarrollador web,
      con experiencia en el desarrollo de aplicaciones web para sectores educativos y empresariales.
    </p>
    <div class="hero__buttons">
      <div>
        <a
          href="https://www.linkedin.com/in/miguel-ángel-llantén-62005a245/"
          target="_blank"
          class="button button--primary"
        >
          <span class="icon-wrapper--small"
            ><Icon name="lucide:linkedin" /></span
          >
          <span>Linkedln</span>
        </a>
      </div>
      <div>
        <a
          href="https://github.com/Filollan"
          target="_blank"
          class="button button--primary"
          aria-label="Github"
        >
          <span class="icon-wrapper--small"><Icon name="lucide:github" /></span>
          <span class="hero__button-title">Github</span>
        </a>
      </div>
      <div>
        <a
          href="https://drive.google.com/file/d/1Xwb5FeBwFAj155xfpeOwxSOIZ0i44hlA/view?usp=sharing"
          target="_blank"
          class="button button--primary"
          aria-label="CV"
        >
          <span class="icon-wrapper--small"
            ><Icon name="lucide:file-text" /></span
          >
          <span class="hero__button-title">CV</span>
        </a>
      </div>
    </div>
  </section>
</div>

<style lang="scss">
  @use "styles/screen";

  .hero {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: calc(100dvh - 4rem);
    padding-block: 3rem;
    text-align: center;

    &__wrapper {
      position: relative;
      overflow: hidden;
    }

    .section__description {
      font-size: 1.3rem; 
      color: var(--accents-7); 
      line-height: 1.5; 
      max-width: 800px; 
      margin-inline: auto;
    }

    &__title {
      margin-bottom: 1.25rem;
      font-size: 3rem;
      font-weight: 700;
      line-height: 1.05;
      color: var(--accents-8);
      letter-spacing: -0.04em;
    }

    &__subtitle {
      margin-bottom: 1.75rem;
      font-size: 1.75rem;
      font-weight: 600;
      line-height: 1;
      color: var(--primary);
      letter-spacing: -0.04em;
    }

    &__buttons {
      display: flex;
      flex-wrap: wrap;
      gap: 0.75rem;
      align-items: center;
      justify-content: center;
      width: 100%;

      a {
        text-decoration: none;
      }
    }

    &__button-title {
      display: none;
    }

    @media (min-width: screen.$md) {
      &__button-title {
        display: inline-block;
      }

      &__title {
        font-size: 5rem;
      }

      &__subtitle {
        margin-bottom: 2.2rem;
        font-size: 2.5rem;
      }
    }
  }

  canvas[data-particle-animation] {
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    width: 100%;
    height: 100%;
  }
</style>

<script>
  // Definir la interfaz para las partículas
  interface Particle {
    x: number;
    y: number;
    size: number;
    velocityX: number;
    velocityY: number;
  }

  document.addEventListener("DOMContentLoaded", () => {
    const canvas = document.querySelector("[data-particle-animation]");
    if (!(canvas instanceof HTMLCanvasElement)) return;

    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    // Inicializar el array de partículas con el tipo correcto
    const particles: Particle[] = [];

    const quantity = Number(canvas.dataset.particleQuantity) || 20;
    const staticity = Number(canvas.dataset.particleStaticity) || 3;
    const ease = Number(canvas.dataset.particleEase) || 50;

    const resizeCanvas = () => {
      canvas.width = canvas.offsetWidth || canvas.clientWidth;
      canvas.height = canvas.offsetHeight || canvas.clientHeight;
    };

    const createParticle = (): Particle => {
      return {
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        size: Math.random() * 2 + 1,
        velocityX: (Math.random() - 0.5) * staticity,
        velocityY: (Math.random() - 0.5) * staticity,
      };
    };

    const updateParticles = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      particles.forEach((particle: Particle) => {
        particle.x += particle.velocityX * (ease / 100);
        particle.y += particle.velocityY * (ease / 100);

        if (particle.x < 0 || particle.x > canvas.width) particle.velocityX *= -1;
        if (particle.y < 0 || particle.y > canvas.height) particle.velocityY *= -1;

        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fillStyle = "rgba(255, 255, 255, 0.6)";
        ctx.fill();
      });

      requestAnimationFrame(updateParticles);
    };

    const initParticles = () => {
      particles.length = 0;
      for (let i = 0; i < quantity; i++) {
        particles.push(createParticle());
      }
    };

    window.addEventListener("resize", () => {
      resizeCanvas();
      initParticles();
    });

    resizeCanvas();
    initParticles();
    updateParticles();
  });
</script>